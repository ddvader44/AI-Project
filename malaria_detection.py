# -*- coding: utf-8 -*-
"""Malaria_Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_SOyq9Iqi70ekIC56T8SYY1b7zhaOzP-

# MALARIAL PARASITE DETECTION USING DEEP LEARNING
"""

#!pip install tensorflow-gpu==2.0.0-rc0

#!pip install --upgrade tensorflow-gpu==2.2.0 --user
#!pip uninstall tensorflow-datasets
#!pip install tensorflow-datasets==4.0.0

import tensorflow as tf

from tensorflow.keras import Sequential
from tensorflow.keras.layers import Flatten, Dense, Conv2D, MaxPool2D,ZeroPadding2D, Dropout
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras import optimizers

print(tf.__version__)

import numpy as np
import matplotlib.pyplot as plt



"""### LOADING THE DATASET """

!git clone https://github.com/ddvader44/AI-Project.git



"""The original dataset can be found on the official NIH Website: https://ceb.nlm.nih.gov/repositories/malaria-datasets/ , also available on kaggle.

## IMAGE PREPROCESSING
"""

img_width = 64
img_height = 64

datagen = ImageDataGenerator(rescale=1/255.0,
                             validation_split=0.2,
                             horizontal_flip=True,
                             vertical_flip=True,
                             #rotation_angle=45,
                             shear_range=16
                             )

train_data_generator = datagen.flow_from_directory(directory = '/content/AI-Project/malaria-dataset', 
                                                   target_size=(img_width, img_height), 
                                                   class_mode='binary', 
                                                   batch_size = 16, 
                                                   subset = 'training',
                                                   #color_mode = 'grayscale',
                                                   interpolation = 'nearest',
                                                   shuffle=True,
                                                   seed=42
                                                   
                                                   
                                                    )

validation_data_generator = datagen.flow_from_directory(directory = '/content/AI-Project/malaria-dataset',
                                                        target_size=(img_width, img_height), 
                                                        class_mode='binary',
                                                        batch_size = 16, 
                                                        subset = 'validation' ,
                                                        #color_mode = 'grayscale',
                                                        interpolation = 'nearest',
                                                        shuffle=True,
                                                        seed=42                                                       
                                                        
                                                        )

train_data_generator.labels

validation_data_generator.labels

#from keras.preprocessing.image import load_img ,img_to_array
#arr_img = img_to_array(train_data_generator[0])
#plt.imshow(arr_img/255)

"""## CNN MODEL BUILDING"""

model = Sequential()

model.add(Conv2D(16, (3,3), input_shape=(img_width,img_height,3) , activation = 'relu' ))  #no of filters. kernel size,..
model.add(MaxPool2D(2,2))
model.add(Dropout(0.2))

model.add(Conv2D(32,(3,3), activation='relu'))
model.add(MaxPool2D(2,2))
model.add(Dropout(0.3))

model.add(Flatten())
model.add(Dense(64, activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(1, activation='sigmoid'))

model.summary()

model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

history = model.fit_generator(generator=train_data_generator, 
                              steps_per_epoch = len(train_data_generator),
                              epochs = 7,
                              validation_data = validation_data_generator,
                              validation_steps = len(validation_data_generator)                             
                              )

history.history

def plot_learningCurve(history, epoch):
  # Plot training & validation accuracy values
  epoch_range = range(1, epoch+1)
  plt.plot(epoch_range, history.history['accuracy'])
  plt.plot(epoch_range, history.history['val_accuracy'])
  plt.title('Model accuracy')
  plt.ylabel('Accuracy')
  plt.xlabel('Epoch')
  plt.legend(['Train', 'Val'], loc='upper left')
  plt.show()

  # Plot training & validation loss values
  plt.plot(epoch_range, history.history['loss'])
  plt.plot(epoch_range, history.history['val_loss'])
  plt.title('Model loss')
  plt.ylabel('Loss')
  plt.xlabel('Epoch')
  plt.legend(['Train', 'Val'], loc='upper left')
  plt.show()

plot_learningCurve(history, 7)

#import pickle
#model.save('basic_cnn.h5')

#basic_cnn = tf.keras.models.load_model('./basic_cnn.h5')



"""### TESTING"""

from tensorflow.keras.preprocessing.image import img_to_array, load_img, array_to_img

img1=load_img('/content/AI-Project/malaria-dataset/Parasitized/C100P61ThinF_IMG_20150918_144104_cell_162.png',target_size=(img_width,img_height))
img2=load_img('/content/AI-Project/malaria-dataset/Parasitized/C100P61ThinF_IMG_20150918_144104_cell_163.png',target_size=(img_width,img_height))
img3=load_img('/content/AI-Project/malaria-dataset/Uninfected/C100P61ThinF_IMG_20150918_144104_cell_128.png', target_size=(img_width,img_height))

x1 = img_to_array(img1)
x2 = img_to_array(img2)
x3 = img_to_array(img3)

x1 = x1.reshape((1,) + x1.shape)
x2 = x2.reshape((1,) + x2.shape)
x3 = x3.reshape((1,) + x3.shape)

y1 = model.predict(x1)
y2 = model.predict(x2)
y3 = model.predict(x3)

plt.imshow(img1)
if y1==1:
  print('The prediction for image1 is : UNINFECTED')
if y1==0:
  print('The prediction for image1 is : PARASITIZED')

plt.imshow(img3)
if y3==1:
  print('The prediction for image2 is : UNINFECTED')
if y3==0:
  print('The prediction for image2 is : PARASITIZED')

